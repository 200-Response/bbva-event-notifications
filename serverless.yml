# Happy Coding!
service: bbva-event-notifications

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  region: ${self:custom.${opt:stage, self:provider.stage}REGION}
  memorySize: 1024
  lambdaHashingVersion: 20201221
  stage: development
  stackName: bbva-event-notifications 
  apiName: bbva-event-notifications 
  deploymentBucket:
    name: ${self:custom.${opt:stage, self:provider.stage}DeployBucket}
  apiGateway:
    description: bbva-event-notifications - manejo de alertas y notificaciones
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonS3FullAccess
    - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
    - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
    - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: arn:aws:sqs:*:*:*
  environment:
    BBVA_EVENTS_SQS: ${self:custom.BBVA_EVENTS_SQS}
    DYNAMO_TABLE_ERROR_CODES: ${self:custom.DYNAMO_TABLE_ERROR_CODES}
    athenaOutputQuerys: ${self:custom.${opt:stage, self:provider.stage}BUCKET_ATHENA}

functions:
  main:
    handler: handler.main
    timeout: 600 #
    name: bbva-event-notifications 
    description: Función principal para el manejo de alertas y notificaciones 
    environment:
      BUCKET: ${self:custom.${opt:stage, self:provider.stage}BUCKET}
      TEST_VARIABLE_0: ${self:custom.TEST_VARIABLE}
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
      
  trigger:
    handler: handler.eventHandlerForATriggerCall
    timeout: 900 #
    name: bbva-event-notifications-s3Trigger
    description: Función para el manejo de alertas y notificaciones - trigger 
    environment:
      TEST_VARIABLE_0: ${self:custom.TEST_VARIABLE}
      BUCKET: ${self:custom.${opt:stage, self:provider.stage}BUCKET}
    events:
      - s3:
          bucket: ${self:custom.${opt:stage, self:provider.stage}BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
          existing: true
    

custom:
  productionDeployBucket: 'xserverless-bbva-deploys-1'
  developmentDeployBucket: 'xserverless-bbva-deploys-dev-1'

  productionSQS: 'arn:aws:sqs:us-east-1::errorsGeneralHandler.fifo'
  developmentSQS: 'arn:aws:sqs:us-east-1::errorsGeneralHandler.fifo'
  
  productionS3ARN: 'arn:aws:s3:::tmp-s3-test-01'
  developmentS3ARN: 'arn:aws:s3:::tmp-s3-test-dev-1'
  
  productionBUCKET: 'tmp-s3-test-01'
  developmentBUCKET: 'tmp-s3-test-dev-1'

  productionBUCKET_ATHENA: 'athena-output-queries-1'
  developmentBUCKET_ATHENA: 'athena-output-queries-dev-1'

  productionREGION: 'us-east-1'
  developmentREGION: 'us-east-2'

  TEST_VARIABLE: 'algun valor'
  DYNAMO_TABLE_ERROR_CODES: 'TPV_Error_Codes'

  BBVA_EVENTS_SQS: "https://sqs.us-east-1.amazonaws.com/327581952167/bbva-event-alert.fifo"